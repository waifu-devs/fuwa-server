// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	ulid "github.com/oklog/ulid/v2"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, fuwa_user_id, joined_at) VALUES (?, ?, ?)
`

type CreateUserParams struct {
	UserID     ulid.ULID `json:"user_id"`
	FuwaUserID ulid.ULID `json:"fuwa_user_id"`
	JoinedAt   int64     `json:"joined_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.UserID, arg.FuwaUserID, arg.JoinedAt)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, fuwa_user_id, joined_at FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID ulid.ULID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.FuwaUserID, &i.JoinedAt)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, fuwa_user_id, joined_at FROM users
WHERE user_id > ? LIMIT ?
`

type ListUsersParams struct {
	UserID ulid.ULID `json:"user_id"`
	Limit  int64     `json:"limit"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.FuwaUserID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
