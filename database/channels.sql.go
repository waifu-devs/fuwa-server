// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channels.sql

package database

import (
	"context"

	ulid "github.com/oklog/ulid/v2"
)

const createChannel = `-- name: CreateChannel :exec
INSERT INTO channels (channel_id, name, type, created_at)
VALUES (?, ?, ?, ?)
`

type CreateChannelParams struct {
	ChannelID ulid.ULID `json:"channel_id"`
	Name      string    `json:"name"`
	Type      string    `json:"type"`
	CreatedAt int64     `json:"created_at"`
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) error {
	_, err := q.db.ExecContext(ctx, createChannel,
		arg.ChannelID,
		arg.Name,
		arg.Type,
		arg.CreatedAt,
	)
	return err
}

const getChannel = `-- name: GetChannel :one
SELECT channel_id, name, type, created_at FROM channels
WHERE channel_id = ?
`

func (q *Queries) GetChannel(ctx context.Context, channelID ulid.ULID) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannel, channelID)
	var i Channel
	err := row.Scan(
		&i.ChannelID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const listChannels = `-- name: ListChannels :many
SELECT channel_id, name, type, created_at FROM channels
WHERE channel_id > ? LIMIT ?
`

type ListChannelsParams struct {
	ChannelID ulid.ULID `json:"channel_id"`
	Limit     int64     `json:"limit"`
}

func (q *Queries) ListChannels(ctx context.Context, arg ListChannelsParams) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannels, arg.ChannelID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ChannelID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listChannelsAll = `-- name: ListChannelsAll :many
SELECT channel_id, name, type, created_at FROM channels
`

func (q *Queries) ListChannelsAll(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, listChannelsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ChannelID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :exec
UPDATE channels
SET name = ?, type = ?
WHERE channel_id = ?
`

type UpdateChannelParams struct {
	Name      string    `json:"name"`
	Type      string    `json:"type"`
	ChannelID ulid.ULID `json:"channel_id"`
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateChannel, arg.Name, arg.Type, arg.ChannelID)
	return err
}
