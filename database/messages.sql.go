// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	ulid "github.com/oklog/ulid/v2"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO channel_messages (
	message_id,
	channel_id,
	author_id,
	content,
	timestamp
)
VALUES ($1, $2, $3, $4, $5)
`

type CreateMessageParams struct {
	MessageID ulid.ULID        `json:"message_id"`
	ChannelID ulid.ULID        `json:"channel_id"`
	AuthorID  []byte           `json:"author_id"`
	Content   pgtype.Text      `json:"content"`
	Timestamp pgtype.Timestamp `json:"timestamp"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.MessageID,
		arg.ChannelID,
		arg.AuthorID,
		arg.Content,
		arg.Timestamp,
	)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT message_id, channel_id, author_id, content, timestamp FROM channel_messages
WHERE message_id = $1
`

func (q *Queries) GetMessage(ctx context.Context, messageID ulid.ULID) (ChannelMessage, error) {
	row := q.db.QueryRow(ctx, getMessage, messageID)
	var i ChannelMessage
	err := row.Scan(
		&i.MessageID,
		&i.ChannelID,
		&i.AuthorID,
		&i.Content,
		&i.Timestamp,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT message_id, channel_id, author_id, content, timestamp FROM channel_messages
WHERE channel_id = $1 AND message_id > $2 LIMIT $3
`

type ListMessagesParams struct {
	ChannelID ulid.ULID `json:"channel_id"`
	MessageID ulid.ULID `json:"message_id"`
	Limit     int32     `json:"limit"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]ChannelMessage, error) {
	rows, err := q.db.Query(ctx, listMessages, arg.ChannelID, arg.MessageID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelMessage
	for rows.Next() {
		var i ChannelMessage
		if err := rows.Scan(
			&i.MessageID,
			&i.ChannelID,
			&i.AuthorID,
			&i.Content,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
